#+title: ELisp 中的正则表达式 (regexp)

* Syntax

字符分为两类.  一类是 /ordinary/ 的; 除此以外皆为 special construct:
- [[‘​=.=​’][‘​=.=​’]], [[‘​=*=​’][‘​=*=​’]], [[‘​=+=​’, ‘​=?=​’][‘​=+=​’]], [[‘​=+=​’, ‘​=?=​’][‘​=?=​’]], [[‘​=\[...\]=​’][‘​=[=​’]], [[‘​=^=​’][‘​=^=​’]], [[‘​=$=​’][‘​=$=​’]], [[‘​=\=​’][‘​=\=​’]];[fn::未来不会有新增的 special 字符.]
- [[‘​=\[...\]=​’][‘​=]=​’]], [[‘​=\[...\]=​’][‘​=-=​’]], [[Character Classes][‘​=[:=​’]]&[[Character Classes][‘​=:]=​’]] 有时特殊.
- 跟在 [[‘​=\=​’][‘​=\=​’]] 后的字符.

** Special Characters

*** ‘​=.=​’                                                         :construct:

匹配任何字符, *除了* newline.

*** ‘​=*=​’                                                  :postfix_operator:

/尽可能多地/ (0\tilde\infty) 重复前一个 /最小的/ regexp.

机制:
这个 matcher 先尽量多地重复前一个表达式, 当后续 regexp 匹配失败后再回溯.

*** ‘​=+=​’, ‘​=?=​’                                           :postfix_operator:

类似于 [[‘​=*=​’][‘​=*=​’]], 但
‘​=+=​’ /至少/ 匹配一次,
‘​=?=​’ /至多/ 匹配一次.

*** ‘​=*?=​’, ‘​=+?=​’, ‘​=??=​’                                 :postfix_operator:

分别是 [[‘​=*=​’][‘​=*=​’]], [[‘​=+=​’, ‘​=?=​’][‘​=+=​’]], [[‘​=+=​’, ‘​=?=​’][‘​=?=​’]] 的 /non-greedy/ 变体.
它们 /尽可能少地/ 重复.

*** ‘​=[...]=​’                                         :character_alternative:

最简单地用例:
匹配被方括号包围的字符; ‘​=[^...]=​’ 匹配没有被包围的字符.

可以用 ‘​=-=​’ 构造一个 range, e.g., =[a-z.]= 匹配 任何小写字母 或 句点.  \\
下界比上界大的 range 实际上是空的, 它不代表任何字符.
因此, =[z-a]=[fn::如果你意在编写一个空的 range, 那么就应该使用这个例子, 因为其它写法容易被误认为是 typo.] 总是匹配失败, 而 =[^z-a]= 总是匹配成功 (甚至包括 newline, 实际上这是 ‘​=[^...]=​’ 的 feature, 也是 ELisp 与 ~grep~ 的不同之处).

可以用 [[Character Classes][‘​=[:...:]=​’]] 构造一个 class[fn::该 feature 由 POSIX 标准指定.], e.g., =[[:lower:][:digit:]]= 匹配 任何小写字母 或 任何十进制数字.  \\
N.b., class 不应该作为 range 的边界.

在 ‘​=[...]=​’ 中, 只有如下字符是 special 的[fn::所以 [[‘​=\=​’][‘​=\=​’]] 无法转义下列字符, 因为在这里, 它不是 special 的.]:
- ‘​=]=​’ \\
  为了包含 ‘​=]=​’ 以匹配这个字符, 将其写在最前端: =[]123]=.
- ‘​=^=​’ \\
  仅当它是第一个字符时是 special 的, 此时, 它的后一个字符被看作是整个 ‘​=[^...]=​’ 的最前端.  \\
  为了包含它, 将其放在除了最前端以外的任何位置: =[12^ab]=.
- ‘​=-=​’ \\
  为了包含它, 将其写在尾端: =[123-]=.
因此, =[]^-]= 匹配以上三个字符.

*** ‘​=^=​’                                    :construct:matches_empty_string:

匹配 string 的 *行首* (或 buffer[fn:Emacs:这是 Emacs Lisp 相关的概念, 只学习 regexp 的话可以忽略.] 中可访问部分的起始端).

为了向后兼容 (historical compatibility), ‘​=^=​’ 只能用在:
- Regexp 的开头.
- 接在 [[‘​=\(...\)=​’][‘​=\(=​’]] 或 [[‘​=\(?:...\)=​’, ‘​=\(?=​/=num=/​=:...\)=​’][‘​=\(?:=​’]] 后面.
- 接在 [[‘​=\|=​’][‘​=\|=​’]] 后面.

*** ‘​=$=​’                                    :construct:matches_empty_string:

类似于 [[‘​=^=​’][‘​=^=​’]], 但是是用来匹配 *行尾*.

为了向后兼容, 只能用在:
- Regexp 的末尾.
- 接在 [[‘​=\(...\)=​’][‘​=\)=​’]] 后面.
- 接在 [[‘​=\|=​’][‘​=\|=​’]] 后面.

*** ‘​=\=​’                                                         :construct:

有两个功能:
- 转义 [[Special Characters][special 字符]].
- 引入[[Backslash Constructs][额外的 special constructs]].

** Character Classes

Character classes 被用在 [[‘​=\[...\]=​’][‘​=[...]=​’]] 中.

*** ‘​=[:ascii:]=​’, ‘​=[:nonascii:]=​’

前者匹配任何 ASCII 字符[fn::Character which codes 0~127.];
后者相当于 =[^[:ascii:]]=.

*** ‘​=[:alnum:]=​’

匹配 任何字母 或 十进制数字.

若 multibyte (多字节) 字符的 Unicode ‘general-category’[fn:Unicode:详见 Unicode 标准.] property (see [[info:elisp#Character Properties][Character Properties]]) 指示该字符是字母 (alphabetic character), 那么也会被匹配.

*** ‘​=[:alpha:]=​’

类似于 [[‘​=\[:alnum:\]=​’][‘​=[:alnum:]=​’]], 但只匹配字母.

*** ‘​=[:blank:]=​’

匹配水平的空白字符 (horizontal whitespace[fn::Defined by Annex C of the Unicode Technical Standard #18.[fn:Unicode]]).

具体地, 它匹配:
- 空格, tab.
- 那些 其 Unicode ‘general-category’[fn:Unicode] property (see [[info:elisp#Character Properties][Character Properties]]) 指示其为 spacing separator 的字符.

*** ‘​=[:cntrl:]=​’

匹配字符 whose code is in the range 0~31.

*** ‘​=[:digit:]=​’

匹配数字 =0= 到 =9=.

*** ‘​=[:graph:]=​’

匹配图形化字符, IOW, everything *except*:
- [[‘​=\[:space:\]=​’][whitespace]].
- ASCII and non-ASCII control characters.
- surrogates[fn::与 UTF-16 有关.[fn:Unicode]].
- 没有被 Unicode 分配的码点, 正如 Unicode ‘general-category’[fn:Unicode] property (see [[info:elisp#Character Properties][Character Properties]]) 所指示的那样.

*** ‘​=[:lower:]=​’, ‘​=[:upper:]=​’

前者匹配小写字母[fn:Case-Table:As determined by the current case table (see [[info:elisp#The Case Table][The Case Table]]).[fn:Emacs]];
后者匹配大写字母.

*** ‘​=[:multibyte:]=​’, ‘​=[:unibyte:]=​’

分别匹配 multibyte (多字节) 和 unibyte (单字节) 字符 (see [[info:elisp#Text Representations][Text Representations]]).

*** ‘​=[:print:]=​’

匹配可打印字符.
相当于 =[=​[[‘​=\[:space:\]=​’][=[:space:]=]][[‘​=\[:graph:\]=​’][=[:graph:]=]]​=]=.

*** ‘​=[:punct:]=​’

匹配标点符号.
(At present, for multibyte characters, it matches anything that has non-[[‘​=\w=​’, ‘​=\W=​’][word syntax]].[fn:Emacs])

*** ‘​=[:space:]=​’

匹配[[‘​=\s=​/=code=/​’, ‘​=\S=​/=code=/​’][符合 whitespace syntax 的字符]] (see [[info:elisp#Table of Syntax Classes][Table of Syntax Classes]]).
IOW, 等价于 =\s-=.

*** ‘​=[:word:]=​’

匹配[[‘​=\s=​/=code=/​’, ‘​=\S=​/=code=/​’][符合 word syntax 的字符]] (see [[info:elisp#Table of Syntax Classes][Table of Syntax Classes]]).
IOW, 等价于 =\sw=.

*** ‘​=[:xdigit:]=​’

匹配 16 进制数字.
相当于 =[=​[[‘​=\[:digit:\]=​’][[:digit:]]]​=A-Fa-f]=.

** Backslash Constructs

大部分情况下, ‘​=\=​’ 后接的字符将精确匹配该字符自身.
然而 例外是: 一些特定的序列, 它们以 [[‘​=\=​’][‘​=\=​’]] 打头, 有特殊的含义.

*** ‘​=\|=​’

逻辑或.

‘​=\|=​’ 使用尽可能大的 regexp, e.g., =ab\|12= 匹配 _=ab= 或 =12=_ 而不是 _=ab2= 或 =a12=_.  \\
可以用 [[‘​=\(...\)=​’][‘​=\(...\)=​’]] 限制 ‘​=\|=​’ 的作用范围.

*** ‘​=\{=​/=m=/​=\}=​’

类似于 [[‘​=*=​’][‘​=*=​’]], 但 /精确/ 匹配 /m/ 次.

*** ‘​=\{=​/=m=/​,​/=n=/​=\}=​’

类似于 [[‘​=*=​’][‘​=*=​’]], 但匹配 /m/​~​/n/ 次.

/m/ 缺省为 0;
省略 /n/ 意为 \infty.

*** ‘​=\(...\)=​’                                                       :group:

有三个功能:
- 限制 [[‘​=\|=​’][‘​=\|=​’]] 的范围.  \\
  E.g., =a\(1\|2\)b= 匹配 _=a1b= 或 =a2b=_ 而不是 _=a1= 或 =2b=_.
- 包裹一个复合的表达式, 以使其作为整体附上 postfix operator.  \\
  E.g., =\(1\|2\)\{2\}= 匹配 _=11= 或 =12= 或 =21= 或 =22=_.
- 标记相应的被匹配的 substring, 为其分配一个编号, 以供将来用 [[‘​=\=​/=digit=/​’][‘​=\=​/=digit=/​’]] 引用 (reference).

*** ‘​=\(?:...\)=​’, ‘​=\(?=​/=num=/​=:...\)=​’                             :group:

前者被称为 /shy group/, 又名 /non-capturing/ 或 /unnumbered group/.  \\
类似于 [[‘​=\(...\)=​’][‘​=\(...\)=​’]], 但不标记被匹配的 substring, 因此无法被 [[‘​=\=​/=digit=/​’][‘​=\=​/=digit=/​’]] 引用 (refer back).

后者被称为 /explicitly numbered group/.  \\
显式地给被匹配的 substring 分配的一个编号.

*** ‘​=\=​/=digit=/​’
**** /=digit=/ 是如何分配的?

Regexp 中的 [[‘​=\(...\)=​’][‘​=\(...\)=​’]] 会按出现的顺序 (只看顺序, 所以嵌套的 [[‘​=\(...\)=​’][‘​=\(...\)=​’]] 能被识别), 被隐式地分配一个编号 (使用序数词, i.e., 从 1 开始); \\
若有必要, [[‘​=\(?:...\)=​’, ‘​=\(?=​/=num=/​=:...\)=​’][‘​=\(?=​/=num=/​=:...\)=​’]] 会覆盖已经存在的编号 /=num=/; \\
每次被隐式分配的编号, 会比先前已经分配的最大编号大 1.

如果类似 [[‘​=\(...\)=​’][‘​=\(...\)=​’]] 这样的结构被重复了多次 (e.g., =\(a\|b\)+=), 则仅为最后一次匹配的 substring 分配编号.

N.b., 编号只分配到个位数, 分完即止.
当然你可以用 [[‘​=\(?:...\)=​’, ‘​=\(?=​/=num=/​=:...\)=​’][‘​=\(?=​/=num=/​=:...\)=​’]] 显式地覆盖.

**** 如何引用先前已经匹配的 substring?

例如, =\(.+\)\1= 匹配同一行[fn::[[‘​=.=​’][‘​=.=​’]] 不匹配 newline.]中前半段与后半段一致的非空 string.

若 /=digit=/ 没有被分配, 则 =\=​/=digit=/ 永不匹配.  \\
例如 =\(one\(two\)\|three\)\2= 永远不会匹配 =three=, 因为当尝试匹配 =three= 时, 表达式中已经没有剩余的 [[‘​=\(...\)=​’][‘​=\(...\)=​’]] 了, 则代表永不匹配的 =\2= 会直接导致匹配失败:
#+BEGIN_SRC emacs-lisp
(string-match-p "\\(one\\(two\\)\\|three\\)\\2" "three")
;; => nil
#+END_SRC
但该表达式可以匹配 =onetwotwo=:
#+BEGIN_SRC emacs-lisp
(string-match-p "\\(one\\(two\\)\\|three\\)\\2" "onetwotwo")
;; => 0
#+END_SRC

*** ‘​=\w=​’, ‘​=\W=​’

前者匹配 [[‘​=\[:word:\]=​’][word-constituent (位于单词中的) 字符]].
(The editor syntax table determines which characters these are.  See [[info:elisp#Syntax Tables][Syntax Tables]].)[fn:Emacs]

后者是前者的补集.

*** ‘​=\s=​/=code=/​’, ‘​=\S=​/=code=/​’

前者匹配符合 /=code=/ syntax 的字符 (see [[info:elisp#Table of Syntax Classes][Table of Syntax Classes]]).[fn:Emacs]  \\
因此, /=code=/ 处填写
- ‘​=w=​’ 以匹配 [[‘​=\w=​’, ‘​=\W=​’][word constituent]].
  等价于 [[‘​=\[:word:\]=​’][=:word:=]].
- ‘​=-=​’ (或 一个空格) 以匹配 whitespace.
  等价于 [[‘​=\[:space:\]=​’][=:space:=]].
- ‘​=(=​’ 以匹配 open parenthesis.
- etc.

后者是前者的补集.

*** ‘​=\c=​/=c=/​’, ‘​=\C=​/=c=/​’

前者匹配 whose category is /=c=/ 的字符 (see [[info:elisp#Categories][Categories]]).[fn:Emacs]  \\
因此, /=c=/ 处填写
- ‘​=c=​’ 以匹配 汉字.
- ‘​=g=​’ 以匹配 希腊字母.
- etc.

后者是前者的补集.

*** ‘​=\`=​’, ‘​=\'=​’                                     :matches_empty_string:

分别匹配 string 或 buffer[fn:Emacs] 的 *开头* 和 *结尾*.

*** ‘​=\==​’                                             :matches_empty_string:

匹配 point.[fn:Emacs]
(This construct is not defined when matching against a string.)

*** ‘​=\b=​’, ‘​=\B=​’                                     :matches_empty_string:

前者匹配 单词的边界处 或 buffer[fn:Emacs] 的首尾;  \\
后者则相反.

*** ‘​=\<=​’, ‘​=\>=​’                                     :matches_empty_string:

分别匹配 单词 的 起始端 和 结束端.

*** ‘​=\_<=​’, ‘​=\_>=​’                                   :matches_empty_string:

分别匹配 symbol 的 起始端 和 结束端.
(A symbol is a sequence of one or more word or symbol-constituent characters.)

* 一个复杂的例子

如下是 Emacs 曾经用来匹配 句尾 (可能尾随 whitespace) 的 regexp:
    : [.?!][]'")}]*\($\| $\|Tab\|  \)[ TabNewline]*
其中, 空白处指代空格, =Tab= 指代 tab 字符 =\t=, =Newline= 指代 newline 字符 =\n=.

这个例子可以用 [[~rx~\[fn:Emacs\]: 结构化 regexp 标记法][~rx~]] 标记法编写:
#+BEGIN_SRC emacs-lisp
(rx (any ".?!")                    ; [.?!]
    (zero-or-more (any "]'\")}"))  ; []'")}]*
    (or line-end                   ; \($
        (seq " " line-end)         ;    \| $
        "\t"                       ;        \|Tab
        "  ")                      ;             \|  \)
    (zero-or-more (any " \t\n")))  ; [ TabNewline]*
#+END_SRC

* ~rx~[fn:Emacs]: 结构化 regexp 标记法

由于 ~rx~ 基于 S-表达式[fn::前缀式语法树.], 因此它更易读, 可以 被格式化 和 注释.

例如以下用于匹配 C 语言 块注释 的 regexp, 可被改写成两种同义的 ~rx~ 表达式:
#+BEGIN_SRC emacs-lisp
;; /\*\(?:[^*]\|\*[^/]\)*\*+/
"/\\*\\(?:[^*]\\|\\*[^/]\\)*\\*+/"

(rx "/*"
    (zero-or-more (or (not (any "*"))
                      (seq "*"
                           (not (any "/")))))
    (one-or-more "*")
    "/")

(rx "/*"
    (* (| (not "*")
          (: "*"
             (not "/"))))
    (+ "*")
    "/")
#+END_SRC

** Constructs in ~rx~

(剩下的有空再写吧...)

*** Literals

*** Sequence and alternative

*** Repetition

*** Matching single characters

*** Character class

*** Zero-width assertions

*** Capture groups

*** Dynamic inclusion

** Functions & macros [fn:Emacs] using ~rx~

*** ~rx~ /~&rest~ ~rx-form~/                                          :macro:

*** ~rx-to-string~ /~rx-expr~ ~&optional~ ~no-group~/              :function:

*** ~pcase~ ~expression~ ~((rx~ /~rx-expr~/​~...)~ ~body-forms...)...~ :macro:

* 相关函数[fn:Emacs]

期望被传入 regexp 的函数在接收到 invalid regexp 时, 会 signal 一个 ~invalid-regexp~ error.

*** ~regexp-quote~ /~string~/                                      :function:

将 literal string 转换成 regexp.
E.g.,
    : (regexp-quote ".")  ; => "\\."

*** ~regexp-opt~ /~strings~ ~&optional~ ~paren~/                   :function:

/~strings~/ 是由 literal string 为元素组成的 list.
该函数相当于逻辑或, 但是它希望返回的 regexp 匹配得尽可能长, e.g.,
#+BEGIN_SRC emacs-lisp
(regexp-opt '("23"
              "1"
              "123"))
;; => "\\(?:1\\(?:23\\)?\\|23\\)"
;; i.e., \(?:1\(?:23\)?\|23\)
#+END_SRC
虽然按照 /~strings~/ 的想法, 遇到 =1= 就可以结束尝试了, 但根据 ~regexp-opt~ 的结果来看, 还会继续尝试下个 substring 是不是 =23=.

*** ~regexp-opt-depth~ /~regexp~/                                  :function:

returns the total number of grouping constructs (不包括 shy group).
E.g.,
    : (regexp-opt-depth "\\(\\(?:\\)\\|\\(\\)\\)")  ; => 2

*** ~regexp-opt-charset~ /~chars~/                                 :function:

/~chars~/ 是由字符为元素组成的 list.
该函数以 ‘​=[...]=​’ 的形式返回取逻辑或的结果, e.g.,
    : (regexp-opt-charset '(?a ?b ?c ?z ?d))  ; => "[a-dz]"

*** ~regexp-unmatchable~                                           :variable:

保证匹配失败的值, 通常为 ~"\\`a\\`"~.

作为对比:
#+BEGIN_SRC emacs-lisp
(string-match-p ""                 "aa")  ; => 0
(string-match-p regexp-unmatchable "aa")  ; => nil
#+END_SRC

意义:
有些 option 设置用来匹配文本, 但是需要它在默认时不匹配任何文本, 可以将此 variable 设为其默认值.

* Suggestions on Optimization

- ‘​=[ab]=​’ 比 ‘​=a\|b=​’ 更快.
- 降低熵值.
  E.g.,
      : \(a*b*\)+  >  \(a\|b\)*  >  [ab]*
- 尽量使用 shy group 而不是 capturing group.
- ~rx~ 会优化一些 [[‘​=\|=​’][or-pattern]], 并且默认使用 shy group.

# 为 footnote 添加分割线.
-----

# Local Variables:
# coding: utf-8-unix
# End:
